package mrf
import briefj.collections.UnorderedPair
import mrf.MRFInteractor
import mrf.MRFUtils
import mrf.hotpotts.HPSingle

model DiscreteMRF {
  /*
   * IMPORTANT: 
   *   laws block:      logf are unnormalized
   *   generate block:  an inexact, Gibbs sampler is used to generate data
   *   Data:            vertices of graph must be consecutive integers from 0 to n-1
   */
  
  param String edgeListFilePath
  param Integer numGibbsIterations ?: 5
  param Integer numClasses ?: 3
  param List<UnorderedPair<Integer, Integer>> edgeList ?: MRFUtils.parseEdgeListToEdgeList(edgeListFilePath)
  param Map<Integer, List<Integer>> neighbourList ?: MRFUtils.parseEdgeListToNeighboursList(edgeListFilePath)
  random MRFInteractor interactor ?: new HPSingle(numClasses)
  random List<IntVar> classes 
  
  laws {

    for (UnorderedPair<Integer, Integer> edge : edgeList) {
      | interactor, IntVar u = classes.get(edge.getFirst()), IntVar v = classes.get(edge.getSecond)
        ~ LogPotential(interactor.logEdgePotential(u, v))
    }

  }
  
  generate(rand) {
      Generators::GibbsDiscreteMRFInPlace(rand, classes, interactor, edgeList, neighbourList, numGibbsIterations)
  }


}