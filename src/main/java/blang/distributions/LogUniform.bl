package blang.distributions

/** The random variable \(X = b^Y\) where \(Y \sim \text{ContinuousUniform}[m, M]\). */
model LogUniform {
  random RealVar realization
  
  /** The left end point \(m\) of the interval. \(m \in (-\infty, M)\) */
  param  RealVar min
  
  /** The right end point \(M\) of the interval. \(M \in (m, \infty)\) */
  param  RealVar max
  
  /** The base \(b\). \(b > 0\) */
  param RealVar base
  
  laws {
    logf(min, max) {
      if (max - min <= 0.0) return NEGATIVE_INFINITY
      return - log(max - min)
    }
    logf(realization, min, max, base) {
      if (base <= 0) return NEGATIVE_INFINITY
      if (realization <= 0) return NEGATIVE_INFINITY
      val logr = log(realization)
      val logb = log(base)
      val transformed = logr / logb
      if (min <= transformed && transformed <= max) return -logr - log(logb)
      else return NEGATIVE_INFINITY
    }
  }
  
  generate (rand) {
    val u = rand.uniform(min, max)
    return pow(base, u)
  }
}