package mrf.hotpotts

import blang.mrf.MRFInteractor
import blang.mrf.MRFGraph
import blang.mrf.hotpotts.HPSingle
import blang.mrf.hotpotts.HPSamplerOptions

model IMC {
  /*
   * IMPORTANT: 
   *   laws block:      logf are unnormalized
   *   generate block:  an inexact, Gibbs sampler is used to generate data
   *   Data:            vertices of graph must be consecutive integers from 0 to n-1
   */
  
  param Integer numClusters ?: 3  // = K.maxSize
  param GlobalDataSource expressionData
  
  param Plate<String> P   // [P]atient
  param Plate<String> N   // [N]ode

  param Integer nGibbsIter ?: 1000
  param Plated<MRFGraph> graph 

  random Plated<IntVar> X
  param MRFInteractor beta ?: new HPSingle(numClusters)
  param HPSamplerOptions samplerOptions ?: new HPSamplerOptions(P, graph, N, X)

  laws {
      for (Index<String> p : P.indices) {
          X.slice(p) | beta, N, numClusters, MRFGraph g = graph.get(p), nGibbsIter
                     ~ HotPotts(nGibbsIter, N, numClusters, g, beta)
      }
  }
  

}