package blang.validation.internals.fixtures



model SpikedGLM {
  
  param Matrix designMatrix // n by p
  random List<IntVar> output // size n
  random List<SpikedRealVar> coefficients ?: {
    val p = designMatrix.nCols
    return new ArrayList(p) => [
      for (int i : 0 ..< p) 
        add(new SpikedRealVar)
    ]
  } 
  
  random RealVar zeroProbability ?: latentReal
  
  laws {
    
    zeroProbability ~ Beta(1,1)
    
    coefficients | zeroProbability ~ 
      SpikeAndSlab(zeroProbability, Normal::distribution(0, 1)) 
    
    for (int index : 0 ..< output.size) {
      output.get(index) | coefficients, 
                          Matrix predictors = designMatrix.row(index) 
                        ~ Bernoulli(logistic({
                          var sum = 0.0
                          for (i : 0 ..< coefficients.size)
                            sum += coefficients.get(i).doubleValue * predictors.get(i)
                          sum
                        }))
    }
    
  }
  
}